ZAUTHENTICATE(ServiceName, Namespace, Username, Password, Credentials, Properties) Public
{
#include %occErrors
#include %occInclude
 
	#;This is from https://github.com/intersystems/Samples-Security
        #;Use or operation of this code is subject to acceptance of the license available in the code 
        #;repository for this code.

	// Sample ZAUTHENTICATE for delegated authentication for resource server
	// based on OAuth 2.0 use of %session.Login.
	//
	// This ZAUTHENTICATE may be used as a model for the ZAUTHENTICATE used to do delegated authentication
	// based on OAuth 2.0 by modifying this routine, copying it to %SYS namespace and renaming to ZAUTHENTICATE.mac.<br><br>
	//
	// Usually you will need to modify at least the roles to be assigned.
	Set roles="%DB_DEFAULT,%Operator"
	
	$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","ServiceName="_ServiceName_", Username="_Username_", roles="_roles)
	
	// MUST BE MODIFIED FOR EACH INSTANCE WHICH USES OAuth 2.0 for REST.
	// Th application name used to define the authorization server to this resource server.
	Set applicationName="demo resource"
 
	Set loginSuccessful=0
	Set errorText=""
	Try {		
		If (ServiceName="%Service_CSP") && (Username="OAuth2") && (Password=$c(1,2,3)){
			// This ZAUTHENTICATE routine will support OAuth 2.0 based
			// delegated authentication for subclasses of %CSP.REST.
			set accessToken=##class(%SYS.OAuth2.AccessToken).GetAccessTokenFromRequest(.sc)
			
			// Check if authorized.
			// If the access token is not a JWT, we would need to validate the access token
			// using another means such as the introspection or userinfo endpoint.
			If $$$ISOK(sc) {
				set valid=##class(%SYS.OAuth2.Validation).ValidateJWT(applicationName,accessToken,,,.jsonObject,,.sc)
			}
			
			If valid {
				// We need to obtain a user name in any way appropriate to the application.  Examples are:<br>
				// from JWT if access token is a JWT using ##class(%SYS.OAuth2.Validate).ValidateJWT,<br>
				// from IDToken if OpenID Connect using ##class(%SYS.OAuth2.Validate).ValidateIDToken,<br>
				// from Userinfo endpoint if OpenID Connect using ##class(%SYS.OAuth2.AccessToken).GetUserinfo or<br>
				// from introspection endpoint using ##class(%SYS.OAuth2.AccessToken).GetIntrospection.<br>
				// This example uses the sub property which is returned by ValidateJWT.
				//
				// Setup the new user.
				// Note that the user must not be a normal Cache user
				// in order to allow creation or update of the delegated user.
				Set loginSuccessful=1
				Set Username="OAuth2"_jsonObject.sub
				Set Properties("FullName")="OAuth account "_Username
				Set Properties("Username")=Username
				Set Properties("Password")=""	// we don't really care about oauth2 account password
.
				// Set the roles and other Properties as appropriate.
				Set Properties("Roles")=roles
.
			} Else {
				Set errorText=$system.Status.GetErrorText(sc)
			}
		}
	} Catch (ex) {
		Set errorText=ex.DisplayString()
	}
 
	If loginSuccessful {
		$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","user="_Username)
		Set sc=$$$OK
	} Else {
		$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","error="_$select(errorText'="":errorText,1:"Access Denied"))
		Set sc=$$$ERROR($$$AccessDenied)
	}
 
	Quit sc
}
GetCredentials(ServiceName,Namespace,Username,Password,Credentials) Public {
	If ServiceName="%Service_CSP" {
		// Supply user name and password for authentication via a subclass of %CSP.REST
		Set Username="OAuth2"
		Set Password=$c(1,2,3)
	}
	Quit $$$OK
}
 
 
 
 



